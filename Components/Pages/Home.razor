@page "/"
@rendermode InteractiveServer

@using Microsoft.JSInterop
@using NextPeople.Services
@using static NextPeople.Services.TicketStateService
@inject TicketStateService State
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="antialiased font-sans">
    <div class="flex h-screen bg-gray-100 text-gray-800">
        <!-- Barra Lateral de Navegação -->
        <div class="w-64 flex-shrink-0 bg-white border-r border-gray-200 flex flex-col">
            <div class="h-16 flex items-center px-6 border-b border-gray-200">
                <h1 class="text-lg font-bold text-teal-600">INSTITUTO V&G</h1>
            </div>
            <nav class="flex-1 px-4 py-6 space-y-2">
                <a @onclick='() => SetView("Dashboard")' class="flex items-center px-4 py-2 rounded-lg cursor-pointer @(currentView == "Dashboard" ? "bg-teal-50 text-teal-700" : "hover:bg-gray-50")">
                    <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path></svg>
                    <span>Dashboard</span>
                </a>
                <a @onclick='() => OpenNewWindow("/generator")' class="flex items-center px-4 py-2 rounded-lg cursor-pointer hover:bg-gray-50">
                    <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 5v2m0 4v2m0 4v2M5 5a2 2 0 00-2 2v3a2 2 0 110 4v3a2 2 0 002 2h14a2 2 0 002-2v-3a2 2 0 110-4V7a2 2 0 00-2-2H5z"></path></svg>
                    <span>Gerador de Senha</span>
                </a>
                <a @onclick='() => OpenNewWindow("/tv")' class="flex items-center px-4 py-2 rounded-lg cursor-pointer hover:bg-gray-50">
                    <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path></svg>
                    <span>Dashboard TV</span>
                </a>
                <a @onclick='() => SetView("Config")' class="flex items-center px-4 py-2 rounded-lg cursor-pointer @(currentView == "Config" ? "bg-teal-50 text-teal-700" : "hover:bg-gray-50")">
                    <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924-1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path></svg>
                    <span>Configuração do Fluxo</span>
                </a>
                <a @onclick='() => SetView("History")' class="flex items-center px-4 py-2 rounded-lg cursor-pointer @(currentView == "History" ? "bg-teal-50 text-teal-700" : "hover:bg-gray-50")">
                    <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
                    <span>Histórico</span>
                </a>
            </nav>
        </div>

        <!-- Conteúdo Principal -->
        <main class="flex-1 flex flex-col overflow-hidden">
            @switch(currentView)
            {
                case "Dashboard":
                    @Dashboard
                    break;
                case "Config":
                    @Config
                    break;
                case "History":
                    @History
                    break;
            }
        </main>
    </div>
</div>

@code {
    private string currentView = "Dashboard";

    // Variáveis locais
    private string newStageName = "";
    private string newWorkstationTypeName = "Guichê";
    private Dictionary<Guid, Guid> selectedWorkstations = new();

    // --- VARIÁVEIS PARA CONTROLAR AS AÇÕES NO CARD ---
    private Guid? expandedWorkstationId;
    private bool isForwarding;

    protected override void OnInitialized()
    {
        State.OnChange += OnStateChanged;
    }

    private async void OnStateChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

    private void SetView(string view) => currentView = view;

    private async Task OpenNewWindow(string url)
    {
        await JSRuntime.InvokeVoidAsync("open", NavManager.ToAbsoluteUri(url).ToString(), "_blank");
    }

    private void CallNextInStage(ServiceStage stage)
    {
        if (!selectedWorkstations.ContainsKey(stage.Id)) return;
        var workstationId = selectedWorkstations[stage.Id];
        State.CallNextInStage(stage, workstationId);
    }

    private void OnWorkstationSelected(ChangeEventArgs e, Guid stageId)
    {
        var value = e.Value?.ToString();
        if (Guid.TryParse(value, out var workstationId))
        {
            selectedWorkstations[stageId] = workstationId;
        }
        StateHasChanged();
    }

    private void AddStageAndResetForm()
    {
        State.AddStage(newStageName, newWorkstationTypeName);
        newStageName = string.Empty;
        newWorkstationTypeName = "Guichê";
    }

    // --- MÉTODOS PARA GERIR AS AÇÕES NO CARD ---

    private void ToggleActionView(Workstation workstation)
    {
        isForwarding = false;
        if (expandedWorkstationId == workstation.Id)
        {
            expandedWorkstationId = null;
        }
        else
        {
            expandedWorkstationId = workstation.Id;
        }
    }

    private void FinishTicket(Workstation workstation)
    {
        State.FinishTicket(workstation);
        expandedWorkstationId = null;
    }

    private void ForwardTicket(Workstation workstation, ServiceStage toStage)
    {
        if (workstation.CurrentTicket != null)
        {
            State.MoveTicketFromWorkstation(workstation, workstation.CurrentTicket, toStage);
        }
        expandedWorkstationId = null;
    }

    public void Dispose()
    {
        State.OnChange -= OnStateChanged;
    }

    // --- RENDERFRAGMENTS ---

    private RenderFragment Dashboard =>
    @<div class="flex-1 flex flex-col h-full overflow-hidden">
        <h1 class="text-3xl font-bold p-6 pb-4">Dashboard</h1>
        <div class="flex-1 flex p-6 pt-2 space-x-4 overflow-x-auto">
            <div class="w-80 bg-gray-200 rounded-lg shadow-lg flex flex-col flex-shrink-0">
                <div class="p-3 text-lg font-bold text-gray-700 border-b border-gray-300">
                    <h3>Sala de Espera (@State.WaitingQueue.Count)</h3>
                    <div class="flex items-center justify-between mt-2">
                        <span class="text-sm font-medium text-gray-600">Enc. Automático</span>
                        <div class="inline-flex items-center cursor-pointer" @onclick="State.ToggleAutoForward" title="Ativar/Desativar encaminhamento automático">
                            <input type="checkbox" checked="@State.AutoForwardEnabled" class="sr-only peer" tabindex="-1">
                            <div class="relative w-11 h-6 bg-gray-300 rounded-full peer peer-focus:ring-2 peer-focus:ring-teal-300 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-teal-600"></div>
                        </div>
                    </div>
                </div>
                <div class="p-2 space-y-2 overflow-y-auto">
                    @foreach (var ticket in State.WaitingQueue.OrderByDescending(t => t.IsPriority).ThenBy(t => t.Timestamp))
                    {
                        <div class="bg-white p-3 rounded-md shadow">
                            <span class="font-bold @(ticket.IsPriority ? "text-red-600" : "text-blue-600")">@ticket.Number</span>
                            <div class="text-xs text-gray-500 mt-2">Mover para fila de:</div>
                            <div class="flex flex-wrap gap-1 mt-1">
                                @foreach(var stage in State.Stages)
                                {
                                    <button @onclick="() => State.MoveTicket(ticket, null, stage)" class="text-xs bg-gray-200 hover:bg-gray-300 px-2 py-1 rounded">@stage.Name</button>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
            @foreach (var stage in State.Stages)
            {
                <div class="w-80 bg-gray-200 rounded-lg shadow-lg flex flex-col flex-shrink-0">
                    <div class="p-3 text-lg font-bold text-gray-700 border-b border-gray-300 flex justify-between items-center gap-2">
                        <span>@stage.Name</span>
                        <button @onclick="() => CallNextInStage(stage)" disabled="@(!selectedWorkstations.ContainsKey(stage.Id))" class="text-sm bg-green-500 hover:bg-green-600 text-white font-bold py-1 px-2 rounded disabled:bg-gray-400 disabled:opacity-75">Chamar</button>
                    </div>
                    <div class="p-2 border-b border-gray-300">
                        <select @onchange="(e) => OnWorkstationSelected(e, stage.Id)" class="w-full p-2 border border-gray-300 rounded-md">
                            <option value="">-- Selecione sua @stage.WorkstationTypeName --</option>
                            @foreach (var ws in stage.Workstations)
                            {
                                <option value="@ws.Id">@stage.WorkstationTypeName @ws.Name</option>
                            }
                        </select>
                    </div>
                    <div class="p-2 border-b border-gray-300">
                        <h4 class="text-sm font-semibold text-center text-gray-600 mb-1">EM ATENDIMENTO</h4>
                        @foreach (var workstation in stage.Workstations.Where(w => w.CurrentTicket != null))
                        {
                            <div class="bg-yellow-300 p-3 rounded-md shadow mb-2 transition-all">
                                <div class="flex justify-between items-start">
                                    <div>
                                        <div class="text-xs font-bold text-yellow-800">@stage.WorkstationTypeName @workstation.Name</div>
                                        <span class="font-bold @(workstation.CurrentTicket!.IsPriority ? "text-red-600" : "text-blue-600")">@workstation.CurrentTicket!.Number</span>
                                    </div>
                                    <button @onclick="() => ToggleActionView(workstation)" class="text-xs bg-blue-500 hover:bg-blue-600 text-white font-bold py-1 px-3 rounded">Ações</button>
                                </div>

                                @if (expandedWorkstationId == workstation.Id)
                                {
                                    <div class="mt-4 pt-4 border-t border-yellow-400">
                                        @if (!isForwarding)
                                        {
                                            <div class="flex items-center justify-between">
                                                <button @onclick="() => FinishTicket(workstation)" class="text-xs bg-white hover:bg-gray-100 text-red-600 border border-red-600 font-bold py-1 px-3 rounded">Finalizar</button>
                                                <button @onclick="() => isForwarding = true" class="text-xs bg-green-500 hover:bg-green-600 text-white font-bold py-1 px-3 rounded">Encaminhar →</button>
                                            </div>
                                        }
                                        else
                                        {
                                            <div>
                                                <p class="text-xs font-bold text-yellow-800 mb-2">Encaminhar para:</p>
                                                <div class="flex flex-wrap gap-2 mb-3">
                                                    @foreach (var toStage in State.Stages.Where(s => s.Id != stage.Id))
                                                    {
                                                        <button @onclick="() => ForwardTicket(workstation, toStage)" class="text-xs bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-3 rounded-lg">@toStage.Name</button>
                                                    }
                                                </div>
                                                <div class="flex justify-end">
                                                     <button @onclick="() => isForwarding = false" class="text-xs bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-1 px-3 rounded-lg">Voltar</button>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                        }
                    </div>
                    <div class="p-2 space-y-2 overflow-y-auto">
                        <h4 class="text-sm font-semibold text-center text-gray-600 mb-1">FILA DE ESPERA (@stage.WaitingTickets.Count)</h4>
                        @foreach (var ticket in stage.WaitingTickets.OrderByDescending(t => t.IsPriority).ThenBy(t => t.Timestamp))
                        {
                            <div class="bg-white p-3 rounded-md shadow">
                                <span class="font-bold @(ticket.IsPriority ? "text-red-600" : "text-blue-600")">@ticket.Number</span>
                                <div class="text-xs text-gray-500 mt-2">Mover para:</div>
                                <div class="flex flex-wrap gap-1 mt-1">
                                    @foreach(var otherStage in State.Stages.Where(s => s.Id != stage.Id))
                                    {
                                        <button @onclick="() => State.MoveTicket(ticket, stage, otherStage)" class="text-xs bg-gray-200 hover:bg-gray-300 px-2 py-1 rounded">@otherStage.Name</button>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>;

    private RenderFragment Config =>
    @<div class="flex-1 p-8 overflow-y-auto">
        <h1 class="text-3xl font-bold mb-2">Configuração do Fluxo</h1>
        <p class="text-gray-600 mb-8">Adicione, remova ou reorganize os estágios e suas respectivas estações de trabalho.</p>
        <div class="max-w-2xl mx-auto bg-white p-8 rounded-xl shadow-md mb-8">
            <h2 class="text-xl font-bold mb-4">Adicionar Novo Estágio (Setor)</h2>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 items-end">
                <div class="md:col-span-2">
                    <label class="block text-sm font-medium text-gray-700">Nome do Estágio</label>
                    <input @bind="newStageName" type="text" placeholder="Ex: Atendimento" class="w-full mt-1 p-2 border border-gray-300 rounded-lg"/>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700">Nome da Estação</label>
                    <input @bind="newWorkstationTypeName" type="text" placeholder="Ex: Mesa, Guichê" class="w-full mt-1 p-2 border border-gray-300 rounded-lg"/>
                </div>
            </div>
            <button @onclick="AddStageAndResetForm" class="mt-4 w-full bg-teal-500 hover:bg-teal-600 text-white font-bold py-2 px-4 rounded-lg">Adicionar Estágio</button>
        </div>
        <div class="space-y-6">
            @foreach (var stage in State.Stages)
            {
                <div class="bg-white p-6 rounded-xl shadow-md">
                    <div class="flex items-center justify-between border-b pb-4 mb-4">
                        <h3 class="text-2xl font-bold text-gray-800">@stage.Name <span class="text-lg font-normal text-gray-500">(@stage.WorkstationTypeName)</span></h3>
                        <button @onclick="() => State.RemoveStage(stage)" class="text-red-500 hover:text-red-700 font-semibold">Remover Estágio</button>
                    </div>
                    <h4 class="font-bold mb-2">Estações de Trabalho</h4>
                    <div class="flex items-center gap-4">
                        <p class="text-gray-600">Quantidade:</p>
                        <button @onclick="() => State.DecrementWorkstation(stage)" disabled="@(!stage.Workstations.Any())" class="bg-white hover:bg-gray-100 text-red-600 border border-red-600 font-bold h-8 w-8 rounded-full flex items-center justify-center transition disabled:bg-gray-100 disabled:text-gray-400 disabled:border-gray-300 disabled:cursor-not-allowed">-</button>
                        <span class="font-bold text-xl text-gray-800 w-8 text-center">@stage.Workstations.Count</span>
                        <button @onclick="() => State.IncrementWorkstation(stage)" class="bg-green-500 hover:bg-green-600 text-white font-bold h-8 w-8 rounded-full flex items-center justify-center transition">+</button>
                    </div>
                </div>
            }
        </div>
    </div>;

    private RenderFragment History =>
    @<div class="flex-1 p-8 overflow-y-auto">
        <h1 class="text-3xl font-bold mb-8">Histórico de Chamadas</h1>
        <div class="bg-white p-6 rounded-xl shadow-md">
            <table class="w-full text-left">
                <thead class="border-b">
                    <tr>
                        <th class="p-4">Senha</th>
                        <th class="p-4">Estágio</th>
                        <th class="p-4">Estação</th>
                        <th class="p-4">Horário</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in State.History)
                    {
                        <tr class="border-b hover:bg-gray-50">
                            <td class="p-4 font-mono">@item.TicketNumber</td>
                            <td class="p-4">@item.StageName</td>
                            <td class="p-4">@item.WorkstationName</td>
                            <td class="p-4 text-gray-600">@item.Timestamp.ToString("dd/MM/yyyy HH:mm:ss")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>;
}

